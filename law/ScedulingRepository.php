<?php

namespace SchedulingBundle\Repository;

/**
 * SchedulingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SchedulingRepository extends \Doctrine\ORM\EntityRepository
{

    /*
     * 查询值班信息
     */
    public function findInfo($id)
    {
        $build = $this->createQueryBuilder('a');
        $build->where('a.userId = :userId and (a.state!=2 or a.state is null)')
            ->setParameter('userId', $id);
        return $build->orderBy('a.createAt', 'desc')
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * 值班监控
     *
     * @param
     *            $id
     * @param
     *            $level
     * @param
     *            $city
     * @param
     *            $area
     * @return mixed[]
     * @throws \Doctrine\DBAL\DBALException
     */
    public function schedulingData($city, $area)
    {
        $date = date('Ymd', time());
        return $this->createQueryBuilder('a')
            ->select('a.userName,a.institutionName,a.startTime,a.endTime,a.date,a.userId,a.institutionId,b.mobile')
            ->join('SchedulingBundle\Entity\DutyPerson', 'b', 'WITH', 'a.userId = b.id')
            ->where('a.date= :date and a.dutyCity = :cityId and a.dutyArea=:areaId and b.status=1 and (a.state!=2 or a.state is null)')
            ->setParameters([
                'date' => $date,
                'cityId' => $city,
                'areaId' => $area
            ])
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * 排班信息
     *
     * @param
     *            $plat_id
     * @param
     *            $start_day
     * @param
     *            $end_day
     * @return array
     */
    public function getSchedulingInfo($plat_id, $start_day, $end_day)
    {
        $build = $this->createQueryBuilder('a');
        $data = $build->where('a.institutionId = :institution_id and (a.state!=2 or a.state is null)')
            ->andWhere('a.date <= :end_day')
            ->andWhere('a.date >= :start_day')
            ->setParameters([
                'institution_id' => $plat_id,
                'end_day' => $end_day,
                'start_day' => $start_day
            ])
            ->getQuery()
            ->getArrayResult();

        return $data;
    }

    /**
     * 值班情况抽查
     *
     * @param unknown $id
     * @param unknown $level
     * @param unknown $city
     * @param unknown $area
     * @return \Doctrine\DBAL\Driver\mixed[]
     */
    public function getdata($city, $area)
    {
        $date = date('Ymd', time());
        return $this->createQueryBuilder('a')
            ->select('a.id', 'a.userName', 'a.institutionName', 'a.institutionId', 'a.userId', 'a.affilateName', 'a.spotStatus', 'a.spotCase')
            ->join('SchedulingBundle\Entity\DutyPerson', 'b', 'WITH', 'a.userId = b.id')
            ->where('a.date<= :date and a.dutyCity = :cityId and a.dutyArea=:areaId and b.status=1 and (a.state!=2 or a.state is null)')
            ->setParameters([
                'date' => $date,
                'cityId' => $city,
                'areaId' => $area
            ])
            ->groupBy('a.userId')
            ->getQuery()
            ->getArrayResult();
    }

    public function getSchedulingPeopleInfo($institution_id, $date)
    {
        try {
            $result = $this->createQueryBuilder('a')
                ->select('a.id,a.userId,a.userName,a.institutionName,a.institutionId,a.startTime,a.endTime,b.mobile,a.typeId,a.date')
                ->leftJoin('SchedulingBundle\Entity\DutyPerson', 'b', 'WITH', 'a.userId = b.id')
                ->where('a.institutionId = :institutionId and a.date= :date and (a.state is null or a.state != 2)')
                ->setParameters([
                    'institutionId' => $institution_id,
                    'date' => $date
                ])
                ->orderBy('a.id', 'DESC')
                ->getQuery()
                ->getArrayResult();
            return empty($result) ? null : $result[0];
        } catch (\Exception $e) {
            return [];
        }
    }

    public function getCrossByCity($city, $start, $end)
    {
        return $this->createQueryBuilder('a')
            ->select('count(a.id) as num, a.dutyCity as city,a.dutyArea as area, a.institutionId as aid')
            ->where('a.typeId = 1 AND a.dutyCity = :city AND a.userId = 0 AND a.date >= :start AND a.date <= :end and (a.state!=2 or a.state is null)')
            ->setParameters([
                'city' => $city,
                'start' => $start,
                'end' => $end
            ])
            ->groupBy('a.institutionId')
            ->getQuery()
            ->getResult();
    }

    public function getScheInfo($userId)
    {
        $date = date('Ymd', time());
        $qb = $this->createQueryBuilder('a')
            ->where('a.userId=:userId and a.date<=:date')
            ->setParameters([
                'userId' => $userId,
                'date' => $date
            ]);
        return $qb->getQuery()->getResult();
    }

    public function getcountlist($userId, $start, $end)
    {
        $result = $this->createQueryBuilder('t')
            ->where('t.userId = :userId and t.createAt>=:start and t.createAt<=:end')
            ->setParameters([
                'userId' => $userId,
                'start' => $start,
                'end' => $end
            ]);
        return $result->getQuery()->getArrayResult();
    }

    //通过季度获取排班数据
    public function getSchedulingByQuarter($season_start, $season_end, $institutionId)
    {
        return $this->createQueryBuilder('a')
            ->select("count('a.userId') as scheduling_num,a.institutionId,a.userId,a.userName,a.affiliateId,a.institutionId,a.date")
            ->where('a.date >= :start and a.date<=:end and a.institutionId =:institutionId')
            ->setParameters([
                'start' => $season_start,
                'end' => $season_end,
                'institutionId' => $institutionId
            ])
            ->groupBy('a.userId')
            ->getQuery()
            ->getArrayResult();
    }

    public function getAttenInfo($userId)
    {
        $date = date('Ymd', time());
        $qb = $this->createQueryBuilder('a')
            ->where('a.userId=:userId and a.date<:date and (a.state != 2 or a.state is null)')
            ->setParameters([
                'userId' => $userId,
                'date' => $date
            ]);

        return $qb->orderBy('a.createAt', 'desc')->groupBy('a.date')->getQuery()->getResult();
    }

    public function getschedulingByType($city = null)
    {
        $qr = $this->createQueryBuilder('a');
        $qr->select('a.institutionId as affiliateId,a.institutionName as affiliateName,a.updateAt')
            ->leftJoin('ApplyBundle\Entity\EntityPlatform', 'b', 'WITH', 'a.institutionId = b.id')
            ->where('a.typeId=1 and a.userId=0');

        if (!empty($city)) {
            $qr->andWhere('b.cITY=:city')->setParameter('city', $city);
        }
        return $qr->getQuery()->getArrayResult();
    }

    //修改短信状态
    public function updateSmsState($id, $smsState)
    {
        return $this->createQueryBuilder('a')
            ->update()
            ->set('a.smsState', $smsState)
            ->where('a.id = :id')
            ->setParameters([
                'id' => $id
            ])
            ->getQuery()
            ->execute();
    }

    //查询排班未发送短信的数据
    public function notSendSms($pagesize, $times)
    {
        return $this->createQueryBuilder('a')
            ->where('(a.smsState=0 or a.smsState is null) and a.date >= :times ')
            ->setParameter('times', $times)
            ->setMaxResults($pagesize)
            ->getQuery()
            ->getResult();
    }

    public function notDutyArea()
    {
        return $this->createQueryBuilder('a')
            ->where('a.dutyArea is null')
            ->getQuery()
            ->getResult();
    }

    public function getSchedulingByTime($start,$end)
    {
        return $this->createQueryBuilder('a')
            ->where('a.date >= :start and a.date <= :end and (a.state != 2 or a.state is null)')
            ->setParameters([
                'start'=>$start,
                'end'=>$end
            ])
            ->getQuery()
            ->getResult();
    }

    public function getSchedulingByDate($uid,$date,$id=''){
        $qr = $this->createQueryBuilder('a');
        $qr->where('a.userId=:uid and a.date=:date and (a.state!=2 or a.state is null)');
        $parame = ['uid'=>$uid,'date'=>$date];
        if(!empty($id)){
            $qr->andWhere('a.id!=:id');
            $parame['id'] = $id;
        }

        $qr->setParameters($parame);
        return $qr->getQuery()->getArrayResult();
    }

    public function getSchedulingByEntity($uid,$date,$entity_id){
        return $this->createQueryBuilder('a')
            ->where('a.userId=:uid and a.date=:date and (a.state!=2 or a.state is null) and a.institutionId=:entityId')
            ->setParameters(['uid'=>$uid,'date'=>$date,'entityId'=>$entity_id])
            ->getQuery()
            ->getArrayResult();
    }

    //查询该天的排班下有多少
    public function getSchedulingByDay($date,$area){
        return $this->createQueryBuilder('a')
            ->where('a.date=:date and (a.state!=2 or a.state is null) and a.dutyArea=:area')
            ->setParameters(['date'=>$date,'area'=>$area])
            ->getQuery()
            ->getArrayResult();
    }

    //通过状态和时间进行查询
    public function getSchedulingDate($date)
    {
        return $this->createQueryBuilder('a')
            ->where('a.date=:date and a.state=1')
            ->setParameter('date',$date)
            ->getQuery()
            ->getResult();

    }
    //是否有排班信息
    public function getInfo($userId,$date)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.userId=:userId and a.date=:date and (a.state!=2 or a.state is null)')
            ->setParameters([
                'userId' => $userId,
                'date' => $date
            ]);

        return $qb->orderBy('a.endTime','ASC')->getQuery()->getResult();
    }

    //删除时间错误的数据
    public function deleteDataByDate()
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'delete from scheduling where date not like "2019%"';
        $stmt = $conn->prepare($sql);
        $stmt->execute();

        return true;
    }
    /*
     * 查询本月给多少人值班信息
     */
    public function getPerson($city,$area)
    {
        $date = date('Ymd', time());
        return $this->createQueryBuilder('a')
            ->join('SchedulingBundle\Entity\DutyPerson', 'b', 'WITH', 'a.userId = b.id')
            ->where('a.date<= :date and b.cityId = :cityId and b.areaId=:areaId and b.status=1 and (a.state!=2 or a.state is null)')
            ->setParameters([
                'date' => $date,
                'cityId' => $city,
                'areaId' => $area
            ])
            ->groupBy('a.userId')
            ->getQuery()
            ->getArrayResult();
    }
    /**
     * 查询值班情况
     */
    public function getCount($level,$cityId=null,$areaId=null)
    {
        $date = date('Ymd', time());
        $qb= $this->createQueryBuilder('a');
        if ($level==0 || $level==1 || $level==2){
            $qb->join('SchedulingBundle\Entity\DutyPerson', 'b', 'WITH', 'a.userId = b.id')
                ->where('a.date<= :date and b.status=1 and (a.state!=2 or a.state is null)')
                ->setParameter('date',$date);
        }elseif ($level==3){
            $qb->join('SchedulingBundle\Entity\DutyPerson', 'b', 'WITH', 'a.userId = b.id')
            ->where('a.date<= :date and b.cityId = :cityId and b.status=1 and (a.state!=2 or a.state is null)')
            ->setParameters([
                'date' => $date,
                'cityId' => $cityId
            ]);
        }elseif ($level==4){
            $qb->join('SchedulingBundle\Entity\DutyPerson', 'b', 'WITH', 'a.userId = b.id')
                ->where('a.date<= :date and b.areaId=:areaId and b.status=1 and (a.state!=2 or a.state is null)')
                ->setParameters([
                    'date' => $date,
                    'areaId' => $areaId
                ]);
        }
        return  $qb->groupBy('a.userId')->getQuery()
            ->getArrayResult();
    }

    public function getSchedulingByDates($userId,$start_day,$end_day){
        return $this->createQueryBuilder('a')
            ->where('a.userId=:userId and a.date<=:endDay and a.date>=:startDay and (a.state!=2 or a.state is null)')
            ->setParameters([
                'userId'=>$userId,
                'endDay'=>$end_day,
                'startDay'=>$start_day
            ])
            ->getQuery()
            ->getArrayResult();
    }


}
